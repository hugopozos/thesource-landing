---
import CTAButton from "../ui/CTAButton.astro";

export interface Props {
  class?: string;
}

const { class: className = "" } = Astro.props;

const navLinks = [
  { name: "Inicio", href: "/" },
  { name: "Nosotros", href: "#about" },
  { name: "Productos", href: "#products" },
  { name: "Contacto", href: "#contact" },
];
---

<header
  id="main-header"
  class={`fixed top-0 z-50 w-full transition-all duration-300 ${className}`}
>
  <nav class="container mx-auto px-4 lg:px-8">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href="/" class="flex items-center">
          <img
            src="/images/logos/thesource-logo.webp"
            alt="The Source Logo"
            class="h-10 w-auto"
            width="120"
            height="40"
          />
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden lg:flex items-center space-x-8">
        {
          navLinks.map((link) => (
            <a
              href={link.href}
              class="text-white hover:text-gray-200 transition-colors duration-200 font-medium drop-shadow-lg uppercase"
            >
              {link.name}
            </a>
          ))
        }
      </div>

      <!-- CTA Button -->
      <div class="hidden lg:flex items-center space-x-4">
        <CTAButton href="#contact" variant="glass" size="md">
          Contactanos
        </CTAButton>
      </div>

      <!-- Mobile menu button -->
      <button
        type="button"
        class="lg:hidden inline-flex items-center justify-center p-2 rounded-lg text-white hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white/50 drop-shadow-lg transition-colors duration-200"
        aria-expanded="false"
        aria-label="Abrir menÃº"
        id="mobile-menu-button"
      >
        <svg
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>

    <!-- Mobile menu -->
    <div class="hidden lg:hidden" id="mobile-menu">
      <div
        class="px-2 pt-2 pb-3 space-y-1 bg-black/90 backdrop-blur-md rounded-lg mt-2"
      >
        {
          navLinks.map((link) => (
            <a
              href={link.href}
              class="block px-3 py-2 rounded-lg text-base font-medium text-white hover:bg-white/20 hover:text-gray-200 transition-colors duration-200 uppercase"
            >
              {link.name}
            </a>
          ))
        }
        <CTAButton
          href="#contact"
          variant="glass"
          size="md"
          class="w-full text-center mt-2"
        >
          Contactanos
        </CTAButton>
      </div>
    </div>
  </nav>
</header>

<script>
  // Mobile menu toggle
  const mobileMenuButton = document.getElementById("mobile-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");

  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener("click", () => {
      const isExpanded =
        mobileMenuButton.getAttribute("aria-expanded") === "true";
      mobileMenuButton.setAttribute("aria-expanded", String(!isExpanded));
      mobileMenu.classList.toggle("hidden");

      // Toggle icon animation
      const icon = mobileMenuButton.querySelector("svg");
      if (icon) {
        icon.style.transform = isExpanded ? "rotate(0deg)" : "rotate(90deg)";
        icon.style.transition = "transform 0.3s ease";
      }
    });

    // Close menu when clicking outside
    document.addEventListener("click", (event) => {
      if (event.target instanceof Node) {
        if (
          !mobileMenuButton.contains(event.target) &&
          !mobileMenu.contains(event.target)
        ) {
          mobileMenu.classList.add("hidden");
          mobileMenuButton.setAttribute("aria-expanded", "false");
          const icon = mobileMenuButton.querySelector("svg");
          if (icon) {
            icon.style.transform = "rotate(0deg)";
          }
        }
      }
    });
  }

  // Header blur effect on scroll
  const header = document.getElementById("main-header");

  if (header) {
    const handleScroll = () => {
      if (window.scrollY > 50) {
        header.classList.add("backdrop-blur-md", "bg-black/10", "shadow-lg");
      } else {
        header.classList.remove("backdrop-blur-md", "bg-black/10", "shadow-lg");
      }
    };

    // Check initial scroll position
    handleScroll();

    // Listen for scroll events
    window.addEventListener("scroll", handleScroll);
  }
</script>
